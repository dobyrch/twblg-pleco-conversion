#!/usr/bin/env python3
import json
import re
import sys

from collections import defaultdict

from tones import tone_diacritic_to_number


def main():
    if len(sys.argv) < 2:
        sys.exit('Usage: json_to_txt FILE ...')

    alternate_readings = [defaultdict(list) for _ in range(3)]
    with open('moedict-data-twblg/uni/又音.csv') as f:
        # skip header
        next(f)
        for line in f:
            row = line.split(',')
            assert(len(row) == 4)
            alternate_readings[int(row[3])-1][int(row[1])].append(tone_diacritic_to_number(row[2].strip()))

    #from pprint import pprint
    #pprint(alternate_readings)

    for arg in sys.argv[1:]:
        with open(arg) as f:
            convert_dictionary(json.load(f), alternate_readings)


bold_on = '\uEABE'
bold_off = '\uEABF'

link_on = '\uEAB8'
link_off = '\uEABB'

newline  = '\uEAB1'
double_newline = newline + ' ' + newline


def convert_dictionary(dictionary, alternate_readings):
    for entry in dictionary:
        headword = entry['title']

        for heteronym in entry['heteronyms']:
            pinyin = '@' + tone_diacritic_to_number(heteronym['trs'])
            definitions = [d for d in heteronym['definitions']
                           if d['def'] not in {'', '綴\u20DE', '狀\u20DE'}]
            split_definition = []

            for i, defdict in enumerate(definitions):
                split_definition.append('')
                definition = defdict['def']

                if definition == '辨\u20DE&nbsp似\u20DE':
                    assert i+2 == len(definitions)
                    split_definition[-1] += bold_on + '辨似' + bold_off + '  '
                    split_definition[-1] += tone_diacritic_to_number(definitions[i+1]['def'])
                    break

                if len(definitions) > 1:
                    split_definition[-1] += bold_on + str(i+1) + bold_off + '  '
                if pos := defdict.get('type'):
                    split_definition[-1] += bold_on + pos + bold_off + '  '

                split_definition[-1] += tone_diacritic_to_number(definition)

                if examples := defdict.get('example'):
                    for i, example in enumerate(examples):
                        example = re.sub('[\uFFF9\uFFFA\uFFFB]', newline, example)
                        split_definition.append(tone_diacritic_to_number(example))

            if synonyms := heteronym.get('synonyms'):
                synonyms = link_on + (link_off + ' ' + link_on).join(synonyms.split(',')) + link_off
                split_definition.append(bold_on + '似' + bold_off + '  '  + synonyms)

            if reading := heteronym.get('reading'):
                split_definition.append('〈' + bold_on + reading + bold_off + '〉')

            entry_id = int(heteronym['id'])
            all_readings = []

            for i, reading_type in enumerate(('又唸作', '俗唸作', '合音唸作')):
                if readings := alternate_readings[i][entry_id]:
                    all_readings.append(bold_on + reading_type + bold_off
                     +  ' ' + '、'.join(readings))

            if all_readings:
                split_definition.append(newline.join(all_readings))

            definition = double_newline.join(d.strip(newline+' '+'\t'+'\n') for d in split_definition)
            print(headword, pinyin, definition, sep='\t')


if __name__ == '__main__':
    main()
